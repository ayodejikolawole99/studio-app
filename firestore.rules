/**
 * @fileoverview Firestore Security Rules for the Canteen Tracker application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for employee-related data,
 * ensuring that employees can only access their own information. Biometric data is handled with special care
 * and is secured against unauthorized access. Authorization Independence is a key consideration in this ruleset.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles, with the employeeId used as the document ID.
 * - /biometricData/{biometricId}: Stores sensitive biometric data, secured with restricted access.
 * - /employees/{employeeId}/feedingRecords/{feedingRecordId}: Stores feeding records for each employee.
 * - /employees/{employeeId}/tickets/{ticketId}: Stores meal tickets generated for each employee.
 *
 * Key Security Decisions:
 * - Employees can only create, read, update, and delete their own feeding records and tickets.
 * - Biometric data access is highly restricted.
 * - The ruleset relies on denormalized `employeeId` fields in subcollections to avoid costly `get()` calls in security rules.
 * - List operations are secured to prevent unauthorized access to employee data.
 *
 * Denormalization for Authorization:
 * - The `employeeId` field is denormalized into the `FeedingRecord` and `Ticket` documents to allow direct ownership checks without additional reads.
 *
 * Structural Segregation:
 * - Employee profiles and biometric data are stored in separate top-level collections to enforce distinct security policies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a global function to check if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner of the existing document, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**************** Employees Collection ****************/
    /**
     * @description Manages employee profile information.
     * @path /employees/{employeeId}
     * @allow (create) - Authenticated user can create their own employee document if the employeeId matches their UID.
     * @allow (get, update, delete) - Authenticated user can access and modify their own employee document if the employeeId matches their UID.
     * @deny (create) - Authenticated user cannot create an employee document with an ID that does not match their UID.
     * @deny (get, update, delete) - Authenticated user cannot access or modify an employee document that does not belong to them.
     * @principle Enforces document ownership for employee profiles and validates relational integrity.
     */
    match /employees/{employeeId} {
      allow get: if true;
      allow list: if false;

      allow create: if isOwner(employeeId) && request.resource.data.id == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(employeeId);
    }

    /**************** BiometricData Collection ****************/
    /**
     * @description Secures biometric data for employees.
     * @path /biometricData/{biometricId}
     * @allow (none) - No direct access granted to employee or any user for biometric data due to sensitivity.
     * @principle Restricts access to sensitive biometric data to prevent unauthorized access.
     */
    match /biometricData/{biometricId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**************** FeedingRecords Collection ****************/
    /**
     * @description Manages feeding records for each employee.
     * @path /employees/{employeeId}/feedingRecords/{feedingRecordId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own feeding records.
     * @deny (create, get, list, update, delete) - Authenticated user cannot access or modify feeding records that do not belong to them.
     * @principle Enforces document ownership for feeding records.
     */
    match /employees/{employeeId}/feedingRecords/{feedingRecordId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);

      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;
      allow delete: if isExistingOwner(employeeId);
    }

    /**************** Tickets Collection ****************/
    /**
     * @description Manages meal tickets generated for each employee.
     * @path /employees/{employeeId}/tickets/{ticketId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own meal tickets.
     * @deny (create, get, list, update, delete) - Authenticated user cannot access or modify meal tickets that do not belong to them.
     * @principle Enforces document ownership for meal tickets.
     */
    match /employees/{employeeId}/tickets/{ticketId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);

      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;
      allow delete: if isExistingOwner(employeeId);
    }
  }
}