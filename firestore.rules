/**
 * @fileoverview Firestore Security Rules for the Canteen System.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data integrity, focusing on controlling access to employee records and feeding records.
 * Data access is generally restricted, and write operations require specific conditions to be met.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles, with the employeeId used as the document ID.
 * - /feedingRecords/{recordId}: Stores records of meal consumption events.
 *
 * Key Security Decisions:
 * - Employees collection is not listable.
 * - Feeding records are publicly readable, but creation and modification are restricted to authorized roles.
 * - The schema is not strictly enforced to allow for rapid iteration, but key fields required for authorization are validated on write.
 *
 * Denormalization for Authorization:
 *  N/A in this simplified model
 *
 * Structural Segregation:
 *  N/A in this simplified model
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the employee profiles. Only authenticated users can read, but no listing.
     * @path /employees/{employeeId}
     * @allow (get) Authenticated user can get any profile.
     * @deny (list) No one can list all profiles.
     * @allow (create) No one can create a profile.
     * @allow (update) No one can update a profile.
     * @allow (delete) No one can delete a profile.
     * @principle Restricts access to employee data.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to feeding records, but restricts write access.
     * @path /feedingRecords/{recordId}
     * @allow (get, list) Any user can read feeding records.
     * @deny (create, update, delete) Only authorized users can create, update or delete records (TODO: implement auth).
     * @principle Allows public data for reporting while restricting modification to authorized users.
     */
    match /feedingRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization logic for creating/modifying feeding records.
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
  }
}