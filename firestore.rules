/**
 * @fileoverview Firestore Security Rules for the Canteen System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for employee profiles
 * and allows public read access to feeding records while restricting writes to authenticated users.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles, where {employeeId} is the
 *   employee's unique identifier. Only the employee themselves can read/write their own profile.
 * - /feedingRecords/{recordId}: Stores records of meal consumptions. These records are publicly readable
 *   but can only be created, updated, or deleted by authenticated users.
 *
 * Key Security Decisions:
 * - Employee listing is explicitly denied to prevent unauthorized access to employee data.
 * - Feeding records are publicly readable to facilitate reporting and monitoring.
 *
 * Denormalization for Authorization:
 * - The `FeedingRecord` entity contains `employeeId` and `employeeName` directly within the document.
 *   This avoids needing to perform additional `get()` operations to verify the employee's identity
 *   when creating feeding records.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects employee profiles. Only the employee themselves can read, update, or delete their profile.
     * @path /employees/{employeeId}
     * @allow (get, update, delete) User with UID 'employee123' can read, update, or delete the /employees/employee123 document.
     * @allow (create) User with UID 'employee123' can create the /employees/employee123 document only if employeeId in the request data also equals 'employee123'
     * @deny (get, update, delete) User with UID 'anotherUser' cannot read, update, or delete the /employees/employee123 document.
     * @deny (create) User with UID 'employee456' cannot create the /employees/employee123 document.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId} {
      // Helper function to check if the user is the owner of the document.
      function isOwner(employeeId) {
        return request.auth != null && request.auth.uid == employeeId;
      }

      // Helper function to check if the user is the existing owner of the document
      // and that the document exists.
      function isExistingOwner(employeeId) {
        return isOwner(employeeId) && resource != null;
      }

      // Allows a user to create their own employee document, enforcing the request.auth.uid == employeeId
      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;

      // Allows a user to read their own employee document
      allow get: if isOwner(employeeId);

      // Allows a user to update their own employee document
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;

      // Allows a user to delete their own employee document
      allow delete: if isExistingOwner(employeeId);

      // Listing all employees is not allowed.
      allow list: if false;
    }

    /**
     * @description Allows public read access to feeding records, but restricts write access to authenticated users.
     * @path /feedingRecords/{recordId}
     * @allow (get, list) Any user (or unauthenticated user) can read the feeding records.
     * @allow (create) Authenticated users can create feeding records.
     * @deny (update, delete) Only authenticated users can update or delete feeding records.
     * @principle Allows public read access with owner-only writes.
     */
    match /feedingRecords/{recordId} {
      // Allows anyone to read feeding records.
      allow get, list: if true;

      // Only authenticated users can create feeding records.
      allow create: if request.auth != null;

      // Only authenticated users can update feeding records.
      allow update: if request.auth != null && resource != null;

      // Only authenticated users can delete feeding records.
      allow delete: if request.auth != null && resource != null;
    }
  }
}