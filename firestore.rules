/**
 * @fileoverview Firestore Security Rules for the canteen system.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by default, restricting access to employee records and allowing public read access to feeding records.
 * Write access to employee records is denied to all users except those with the 'admin' role, enforced through custom claims.
 * Feeding records are publicly readable but only admin users may create them.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profile data, with the employeeId used as the document ID.
 * - /feedingRecords/{recordId}: Stores records of employee meal consumption.
 *
 * Key Security Decisions:
 * - Employee listing is disabled to protect employee privacy.
 * - The 'admin' custom claim is the sole means of gaining elevated privileges.
 *
 * Denormalization for Authorization:
 * - An 'admin' custom claim is required on the `request.auth.token` to perform `create`, `update`, and `delete` operations on the `employees` collection.
 *
 * Structural Segregation:
 * - This ruleset does not implement structural segregation, as there is no separation of private and public employee data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages employee profiles. Only admins can create, update, or delete employee records. Regular employees can only read their own records. Listing employees is denied.
     * @path /employees/{employeeId}
     * @allow (create) - An admin user with the 'admin' custom claim can create a new employee record.
     * @allow (read) - If the user's UID is equal to the employeeId they are trying to read.
     * @allow (update) - An admin user with the 'admin' custom claim can update an existing employee record.
     * @allow (delete) - An admin user with the 'admin' custom claim can delete an existing employee record.
     * @deny (create) - A non-admin user attempts to create an employee record.
     * @deny (read) - A user attempts to read an employee record that does not belong to them.
     * @deny (update) - A non-admin user attempts to update an employee record.
     * @deny (delete) - A non-admin user attempts to delete an employee record.
     * @principle Enforces role-based access control and document ownership.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn() && request.auth.uid == employeeId;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && isExistingDocument();
      allow delete: if isAdmin() && isExistingDocument();
    }

    /**
     * @description Manages feeding records. Anyone can read the feeding records, but only admins can create them. Updates and deletes are not allowed.
     * @path /feedingRecords/{recordId}
     * @allow (get) - Any user, even unauthenticated, can read feeding records.
     * @allow (list) - Any user, even unauthenticated, can list feeding records.
     * @allow (create) - An admin user with the 'admin' custom claim can create a new feeding record.
     * @deny (create) - A non-admin user attempts to create a feeding record.
     * @deny (update) - Any user attempts to update a feeding record.
     * @deny (delete) - Any user attempts to delete a feeding record.
     * @principle Allows public read access with restricted write access.
     */
    match /feedingRecords/{recordId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    function isExistingDocument() {
      return resource != null;
    }
  }
}