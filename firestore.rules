/**
 * @fileOverview Firestore Security Rules for the Canteen System.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership, enforcing strict controls on data access.
 * The ruleset is designed for prototyping, so data validation is intentionally relaxed except where necessary for authorization.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles, with the employeeId used as the document ID. Only the employee themselves can read or write their own profile.
 * - /feedingRecords/{recordId}: Stores a log of feeding events. Intended for system-level logging, write access is completely denied, while read access is public for reporting purposes.
 *
 * Key Security Decisions:
 * - Employees can only access their own employee document. No listing of all employees is allowed.
 * - Feeding records are publicly readable but not writable from the client.
 *
 * Denormalization for Authorization:
 * - The security rules do not rely on denormalization.
 *
 * Structural Segregation:
 * - The rules leverage separate collections for employee profiles (private, user-specific) and feeding records (public logging).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to employee profiles. Each employee can only read and write their own profile.
     * @path /employees/{employeeId}
     * @allow (create, update, delete) auth.uid == employeeId. Allows an employee to create, update, or delete their own profile.
     * @allow (get) auth.uid == employeeId. Allows an employee to read their own profile.
     * @deny (create, update, delete) auth.uid != employeeId. Prevents employees from modifying other profiles.
     * @deny list: Listing all employees is not permitted.
     * @principle Enforces strict user-ownership for employee profiles.
     */
    match /employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(employeeId) {
        return request.auth.uid == employeeId;
      }
      function isExistingOwner(employeeId) {
          return isOwner(employeeId) && exists(resource);
      }

      allow get: if isOwner(employeeId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(employeeId);
      allow update: if isExistingOwner(employeeId);
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Controls access to feeding records. These records are publicly readable, but only writeable by backend services.
     * @path /feedingRecords/{recordId}
     * @allow get, list: if true. Allows anyone to read feeding records.
     * @deny create, update, delete: No client-side writes allowed.
     * @principle Allows public read access for feeding records.
     */
    match /feedingRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}