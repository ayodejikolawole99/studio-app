/**
 * @description This ruleset enforces a strict user-ownership model for employee profiles and allows public read access to feeding records. Administrative privileges are granted through custom claims.
 * @dataStructure
 *   - /employees/{employeeId}: Stores employee profiles, with the document ID being the employee's ID.
 *   - /feedingRecords/{recordId}: Stores records of meal consumption events.
 * @keySecurityDecisions
 *   - Employee profiles are only readable by the employee themselves or by accounts with the 'admin' custom claim.
 *   - Only accounts with the 'admin' custom claim can create, update, or delete employee profiles.
 *   - Feeding records are publicly readable but cannot be created, updated, or deleted directly through client-side rules; they must be managed via the Admin SDK.
 * @denormalizationForAuthorization
 *   - The 'employeeId' is used both as the document ID and as a field within the Employee document for easy authorization.
 * @structuralSegregation
 *   - No segregation is needed as private employee data and public logs are stored in separate collections with specific rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages employee profiles, allowing employees to read their own profiles and admins to manage all profiles.
     * @path /employees/{employeeId}
     * @allow (read) User with UID 'employeeId' can read.
     * @allow (create, update, delete) User with 'admin' custom claim can modify.
     * @deny (create, update, delete) User without 'admin' custom claim cannot modify.
     * @deny (read) User with UID other than 'employeeId' and without 'admin' claim cannot read.
     * @principle Enforces document ownership for reads and admin-only access for writes.
     */
    match /employees/{employeeId} {
      // Read rules
      allow get: if isSignedIn() && (request.auth.uid == employeeId || isAdmin());
      allow list: if isSignedIn() && isAdmin();

      // Write rules
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores records of meal consumption events, publicly readable but writable only via Admin SDK.
     * @path /feedingRecords/{recordId}
     * @allow (read) Any user can read feeding records.
     * @deny (create, update, delete) No user can create, update, or delete feeding records through client-side rules.
     * @principle Public read access with admin-only writes.
     */
    match /feedingRecords/{recordId} {
      // Read rules
      allow get, list: if true;

      // Write rules
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return request.auth.token.admin == true;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    function isExistingEmployee(employeeId) {
        return exists(/databases/$(database)/documents/employees/$(employeeId));
    }

    // Relaxing validation to allow rapid iteration.  Focus is on authorization, not data shape.
    function isValidEmployeeCreate(employeeId) {
        return true;
    }

  }
}