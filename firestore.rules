/**
 * @description This ruleset enforces a role-based access control model for managing employees and tracking feeding records.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles, with the employeeId used as the document ID.
 * - /feedingRecords/{recordId}: Stores records of meal consumption events.
 *
 * Key Security Decisions:
 * - Only authenticated admins can create, update, or delete employee profiles.
 * - Employees can only read their own profile data.
 * - Feeding records are publicly readable, but creation, update, and deletion are disallowed.
 * - The system uses anonymous authentication, but admin privileges are determined by a custom claim set on the user's token.
 *
 * Denormalization for Authorization:
 * - Employee profiles are stored directly under /employees/{employeeId} and are secured based on the employeeId matching the authenticated user's UID. This avoids the need for additional queries to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages employee profiles, restricting write access to admins and read access to the employee themselves.
     * @path /employees/{employeeId}
     * @allow (create) - An admin creates a new employee profile. `request.auth.token.admin == true`
     * @allow (read) - An employee reads their own profile. `request.auth.uid == employeeId`
     * @deny (create) - A non-admin attempts to create an employee profile. `request.auth.token.admin == false`
     * @deny (read) - An employee attempts to read another employee's profile. `request.auth.uid != employeeId`
     * @principle Enforces role-based access control: admins manage staff, employees read themselves.
     */
    match /employees/{employeeId} {
      // Admins can create/update/delete
      allow create, update, delete: if isSignedIn() && isAdmin();

      // Employees can read their own record
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if false;
    }

    /**
     * @description Logs feeding events, making the records publicly readable but disallowing any modifications.
     * @path /feedingRecords/{recordId}
     * @allow (read) - Anyone can read the feeding records.
     * @deny (create) - No one can create a feeding record through the client.
     * @deny (update) - No one can update a feeding record through the client.
     * @deny (delete) - No one can delete a feeding record through the client.
     * @principle Public read access with no modifications allowed.
     */
    match /feedingRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // ---- Helper functions ----

    // Checks if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is an admin based on the custom claim
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Checks if the authenticated user's UID matches the provided userId
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}