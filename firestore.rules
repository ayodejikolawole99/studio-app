/**
 * @fileoverview Firestore Security Rules for the Canteen System.
 *
 * Core Philosophy:
 * This ruleset prioritizes data privacy and access control. Employees can only manage their own profiles.
 * Feeding records are append-only and cannot be modified or deleted after creation.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profile information, with the employeeId used as the document ID.
 * - /feedingRecords/{recordId}: Stores records of employee meal consumption.
 *
 * Key Security Decisions:
 * - Employees can only read and update their own profile data. Listing all employees is disallowed.
 * - Feeding records are created automatically by a trusted process. They are not editable or deletable by end-users.
 * - Anonymous authentication is used. All write operations are protected by a valid user ID.
 *
 * Denormalization for Authorization:
 * - The `FeedingRecord` entity denormalizes `employeeName` and `department` to simplify querying and reporting without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to employee profile documents.
     * @path /employees/{employeeId}
     * @allow (get) User with ID 'employee123' can read their own profile.
     * @allow (create) User with ID 'employee123' can create their own profile.
     * @allow (update) User with ID 'employee123' can update their own profile.
     * @deny (get) User with ID 'employee456' cannot read the profile of user 'employee123'.
     * @deny (list) No one can list all employee profiles.
     * @deny (create) User with ID 'employee456' cannot create the profile of user 'employee123'.
     * @deny (update) User with ID 'employee456' cannot update the profile of user 'employee123'.
     * @deny (delete) Only the user themselves can delete their profile.
     * @principle Enforces document ownership: only the employee can read, update, or delete their profile.
     */
    match /employees/{employeeId} {
      allow get: if isOwner(employeeId);
      allow list: if false;
      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Controls access to feeding record documents.
     * @path /feedingRecords/{recordId}
     * @allow (get) Anyone can read feeding records.
     * @allow (list) Anyone can list feeding records.
     * @allow (create) Anyone can create feeding records. Typically a trusted process will create these records.
     * @deny (update) No one can update feeding records after they are created.
     * @deny (delete) No one can delete feeding records.
     * @principle Feeding records are append-only.
     */
    match /feedingRecords/{recordId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}