rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the `isSignedIn()` helper function.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the `isOwner(userId)` helper function.
     */
    function isOwner(employeeId) {
      return request.auth.uid == employeeId;
    }

    /**
     * @description Defines the `isExistingOwner(userId)` helper function.
     */
    function isExistingOwner(employeeId) {
      return isSignedIn() && resource.data.id == request.auth.uid;
    }

    /**
     * @description Employee profile information. Only allows authenticated users to read their own profile.
     * @path /employees/{employeeId}
     * @allow Signed-in user (get)
     * @deny Non-signed-in user (get)
     * @principle Enforces document ownership for reads and writes
     */
    match /employees/{employeeId} {
      allow get: if isOwner(employeeId);
      allow list: if false;

      allow create: if request.auth.uid == employeeId;
      allow update: if isOwner(employeeId);
      allow delete: if isOwner(employeeId);
    }

    /**
     * @description Biometric data for employees.
     * @path /biometricData/{biometricId}
     * @principle Restricts write access based on document ownership.  Since the link to the user can not be verified, writes are not allowed.
     */
    match /biometricData/{biometricId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO:  Implement secure creation.
      allow update: if false; // TODO: Implement secure updates.
      allow delete: if false; // TODO: Implement secure deletes.
    }

    /**
     * @description Feeding records for each employee.
     * @path /employees/{employeeId}/feedingRecords/{feedingRecordId}
     * @principle Enforces document ownership for writes. The employeeId is denormalized within the document to ensure Authorization Independence.
     */
    match /employees/{employeeId}/feedingRecords/{feedingRecordId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if request.auth.uid == employeeId;
      allow update: if isOwner(employeeId);
      allow delete: if isOwner(employeeId);
    }

    /**
     * @description Meal tickets generated for each employee.
     * @path /employees/{employeeId}/tickets/{ticketId}
     * @principle Enforces document ownership for writes. The employeeId is denormalized within the document to ensure Authorization Independence.
     */
    match /employees/{employeeId}/tickets/{ticketId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if request.auth.uid == employeeId;
      allow update: if isOwner(employeeId);
      allow delete: if isOwner(employeeId);
    }
  }
}