/**
 * @fileOverview Firestore Security Rules for the Canteen Tracker application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for employee-related data (feeding records, tickets).
 * Biometric data is stored in a separate collection with its own unique identifier.
 * Employee profiles are stored in a top-level collection and are readable by anyone, but only updatable/deletable by the owner.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profile information.
 * - /biometricData/{biometricId}: Stores biometric data for employees.
 * - /employees/{employeeId}/feedingRecords/{feedingRecordId}: Stores feeding records for each employee.
 * - /employees/{employeeId}/tickets/{ticketId}: Stores meal tickets generated for each employee.
 *
 * Key Security Decisions:
 * - Listing employees is allowed.
 * - All write operations require authentication.
 * - User data is scoped under the /employees/{employeeId} path, enforcing owner-only access to feeding records and tickets.
 *
 * Denormalization for Authorization:
 * The `employeeId` is denormalized within the `FeedingRecord` and `Ticket` documents to ensure authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading employee profile information. Only the employee can update or delete their profile.
     * @path /employees/{employeeId}
     * @allow (get, list): Any user can read employee profiles.
     * @allow (create): An authenticated user can create a new employee profile for themselves (employeeId in document must match auth.uid).
     * @allow (update, delete): Only the employee who owns the profile can modify it.
     * @deny create: if the employeeId in the document does not match the authenticated user's ID.
     * @deny update, delete: if the requesting user is not the owner of the employee profile.
     * @principle Enforces document ownership for writes. Allows public reads.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Allows managing biometric data.  Write permissions are denied.
     * @path /biometricData/{biometricId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true;
     * @principle Read only publicly.
     */
    match /biometricData/{biometricId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows an employee to manage their own feeding records.
     * @path /employees/{employeeId}/feedingRecords/{feedingRecordId}
     * @allow (get, list): Only the employee who owns the feeding records can read them.
     * @allow (create): An authenticated user can create a new feeding record for themselves (employeeId in path must match auth.uid).
     * @allow (update, delete): Only the employee who owns the feeding record can modify it.
     * @deny create: if the employeeId in the path does not match the authenticated user's ID.
     * @deny update, delete: if the requesting user is not the owner of the feeding record.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /employees/{employeeId}/feedingRecords/{feedingRecordId} {
      allow get, list: if isSignedIn() && isOwner(employeeId);
      allow create: if isSignedIn() && request.resource.data.employeeId == employeeId;
      allow update, delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Allows an employee to manage their own tickets.
     * @path /employees/{employeeId}/tickets/{ticketId}
     * @allow (get, list): Only the employee who owns the tickets can read them.
     * @allow (create): An authenticated user can create a new ticket for themselves (employeeId in path must match auth.uid).
     * @allow (update, delete): Only the employee who owns the ticket can modify it.
     * @deny create: if the employeeId in the path does not match the authenticated user's ID.
     * @deny update, delete: if the requesting user is not the owner of the ticket.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /employees/{employeeId}/tickets/{ticketId} {
      allow get, list: if isSignedIn() && isOwner(employeeId);
      allow create: if isSignedIn() && request.resource.data.employeeId == employeeId;
      allow update, delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}