/**
 * @fileoverview Firestore Security Rules for the Canteen System.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership, restricting access based on user authentication and explicit authorization checks.
 * It allows unauthenticated access to employee and feeding records data but denies all write access due to anonymous auth provider.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles, with the employeeId as the document ID.
 * - /feedingRecords/{recordId}: Logs feeding events, denormalized for efficient querying.
 *
 * Key Security Decisions:
 * - Read access to employee and feeding records collections for unauthenticated access.
 * - All write operations are forbidden.
 *
 * Denormalization for Authorization: N/A (no write permissions)
 * Structural Segregation: N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read employee data.  All writes are forbidden.
     * @path /employees/{employeeId}
     * @allow (get, list): Any unauthenticated user can retrieve employee profiles.
     * @deny (create, update, delete): No one can create, update, or delete employee profiles.
     * @principle Allows public reads, denies all writes for all users.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read feeding records.  All writes are forbidden.
     * @path /feedingRecords/{recordId}
     * @allow (get, list): Any unauthenticated user can retrieve feeding records.
     * @deny (create, update, delete): No one can create, update, or delete feeding records.
     * @principle Allows public reads, denies all writes for all users.
     */
    match /feedingRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}