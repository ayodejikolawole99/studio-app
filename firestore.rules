/**
 * @fileoverview Firestore Security Rules for the Canteen Tracker application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for employee-related data (feeding records, tickets)
 * nested under the /employees/{employeeId} path.  Biometric data and employee profiles
 * are stored in top-level collections. Authorization decisions are made independently within each document
 * where applicable.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles.
 * - /biometricData/{biometricId}: Stores biometric data.
 * - /employees/{employeeId}/feedingRecords/{feedingRecordId}: Stores feeding records for each employee.
 *   The `employeeId` is denormalized in the FeedingRecord document for authorization.
 * - /employees/{employeeId}/tickets/{ticketId}: Stores meal tickets for each employee.
 *   The `employeeId` is denormalized in the Ticket document for authorization.
 *
 * Key Security Decisions:
 * - Employees can only list their own feeding records and tickets.
 * - Read permissions are generally restricted to authenticated users.
 *
 * Denormalization for Authorization:
 * - The `employeeId` field is denormalized into the `FeedingRecord` and `Ticket` documents.
 *   This avoids costly `get()` calls to the `employees` collection during authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure employee profile information. Allows read access to authenticated users.
     *               Write access is denied in this prototyping phase.
     * @path /employees/{employeeId}
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if true;
     * @principle Requires user to be signed in to read employees information.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure biometric data. Allows read access to authenticated users.
     *               Write access is denied in this prototyping phase.
     * @path /biometricData/{biometricId}
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if true;
     * @principle Requires user to be signed in to read biometric data.
     */
    match /biometricData/{biometricId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure feeding records for each employee.
     * @path /employees/{employeeId}/feedingRecords/{feedingRecordId}
     * @allow get: if isSignedIn() && isOwner(employeeId);
     * @allow list: if isSignedIn() && isOwner(employeeId);
     * @allow create: if isSignedIn() && request.resource.data.employeeId == employeeId;
     * @allow update: if isSignedIn() && isExistingOwner(employeeId) && resource.data.employeeId == employeeId;
     * @allow delete: if isSignedIn() && isExistingOwner(employeeId);
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId}/feedingRecords/{feedingRecordId} {
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if isSignedIn() && isOwner(employeeId);
      allow create: if isSignedIn() && request.resource.data.employeeId == employeeId;
      allow update: if isSignedIn() && isExistingOwner(employeeId) && resource.data.employeeId == employeeId;
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Secure meal tickets generated for each employee.
     * @path /employees/{employeeId}/tickets/{ticketId}
     * @allow get: if isSignedIn() && isOwner(employeeId);
     * @allow list: if isSignedIn() && isOwner(employeeId);
     * @allow create: if isSignedIn() && request.resource.data.employeeId == employeeId;
     * @allow update: if isSignedIn() && isExistingOwner(employeeId) && resource.data.employeeId == employeeId;
     * @allow delete: if isSignedIn() && isExistingOwner(employeeId);
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId}/tickets/{ticketId} {
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if isSignedIn() && isOwner(employeeId);
      allow create: if isSignedIn() && request.resource.data.employeeId == employeeId;
      allow update: if isSignedIn() && isExistingOwner(employeeId) && resource.data.employeeId == employeeId;
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}