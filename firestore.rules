/**
 * @fileoverview Firestore Security Rules for the Canteen Tracker application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for employee-related data
 * (feeding records and tickets) and restricts access to employee profiles and biometric
 * data based on verified identity. It leverages path-based authorization for
 * simplicity and performance, and employs data denormalization to avoid costly
 * `get()` calls within the rules.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles, with employeeId as the document ID.
 * - /biometricData/{biometricId}: Stores biometric data, with biometricId as the document ID.
 * - /employees/{employeeId}/feedingRecords/{feedingRecordId}: Stores feeding records for an
 *   employee, with feedingRecordId as the document ID.
 * - /employees/{employeeId}/tickets/{ticketId}: Stores meal tickets for an employee, with
 *   ticketId as the document ID.
 *
 * Key Security Decisions:
 * - Employees can only access their own feeding records and tickets.
 * - Listing all documents in any collection is disallowed to prevent information leakage.
 * - Biometric data is secured and access is restricted.
 * - Data consistency between the path and the document's internal `employeeId` field is enforced
 *   for feeding records and tickets.
 * - The rule does not do role based authentication
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for employee profiles. Allows read-only access to all authenticated users.
     * @path /employees/{employeeId}
     * @allow (get) Authenticated user can read any employee profile.
     * @deny (create, update, delete) No one can create, update, or delete employee profiles through direct client requests.
     * @principle Read-only access for all authenticated users.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for biometric data. Restricts access to ensure data security.
     * @path /biometricData/{biometricId}
     * @allow None. No direct access granted.
     * @deny All operations are denied.
     * @principle Restricts access to biometric data for security reasons.
     */
    match /biometricData/{biometricId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for feeding records under an employee.  Allows an employee to read and write their own feeding records.
     * @path /employees/{employeeId}/feedingRecords/{feedingRecordId}
     * @allow (create) Authenticated user can create a feeding record under their employee ID.
     * @allow (get, list) Authenticated user can read/list feeding records under their employee ID.
     * @allow (update, delete) Authenticated user can update/delete a feeding record under their employee ID, if it exists.
     * @deny (create) Authenticated user cannot create a feeding record under another employee's ID.
     * @deny (update, delete) If the feeding record does not exist, the update/delete operation is denied.
     * @principle Enforces document ownership and existence for writes.
     */
    match /employees/{employeeId}/feedingRecords/{feedingRecordId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Rule for tickets under an employee.  Allows an employee to read and write their own tickets.
     * @path /employees/{employeeId}/tickets/{ticketId}
     * @allow (create) Authenticated user can create a ticket under their employee ID.
     * @allow (get, list) Authenticated user can read/list tickets under their employee ID.
     * @allow (update, delete) Authenticated user can update/delete a ticket under their employee ID, if it exists.
     * @deny (create) Authenticated user cannot create a ticket under another employee's ID.
     * @deny (update, delete) If the ticket does not exist, the update/delete operation is denied.
     * @principle Enforces document ownership and existence for writes.
     */
    match /employees/{employeeId}/tickets/{ticketId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;
      allow delete: if isExistingOwner(employeeId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}