/**
 * @fileoverview Firestore Security Rules for the Canteen System.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership, enforcing strict control
 * over who can access and modify data. It assumes anonymous authentication for
 * ease of prototyping but relies on properly structured data and denormalization
 * to maintain security.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles, with the employeeId
 *   being the document ID.
 * - /feedingRecords/{recordId}: Stores records of employee meal consumption.
 * - /biometrics/{employeeId}: Stores biometric data for each employee, with
 *   employeeId as the document ID.
 *
 * Key Security Decisions:
 * - Employees can only read their own profile data and biometric information.
 * - Meal consumption records are publicly readable for reporting purposes.
 *   However, creating, updating, or deleting these records is restricted.
 * - No user listing is allowed for any collection.
 * - Anonymous authentication is used. In a production environment, this should
 *   be replaced with a more secure authentication method.
 *
 * Denormalization for Authorization:
 * - The `FeedingRecord` includes the `employeeId`, `employeeName`, and
 *   `department` to avoid requiring additional reads for authorization and
 *   display purposes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to employee profiles.
     * @path /employees/{employeeId}
     * @allow (get, list) Authenticated user can read their own profile.
     * @allow (create, update, delete) Authenticated user can only modify their own profile.
     * @deny (get, list) Non-authenticated user cannot read employee profiles.
     * @deny (create, update, delete) Non-authenticated user cannot modify employee profiles.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(employeeId);
      allow update: if isSignedIn() && isExistingOwner(employeeId);
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Controls access to feeding records.
     * @path /feedingRecords/{recordId}
     * @allow (get, list) Anyone can read feeding records for public reporting.
     * @deny (create, update, delete) Only authorized personnel (e.g., admin) can modify feeding records.
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /feedingRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Controls access to biometric data.
     * @path /biometrics/{employeeId}
     * @allow (get) Authenticated user can read their own biometric data.
     * @allow (create, update, delete) Authenticated user can only modify their own biometric data.
     * @deny (get, list) Non-authenticated user cannot read biometric data.
     * @deny (create, update, delete) Non-authenticated user cannot modify biometric data.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /biometrics/{employeeId} {
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(employeeId);
      allow update: if isSignedIn() && isExistingOwner(employeeId);
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}